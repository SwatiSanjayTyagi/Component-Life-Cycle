{"ast":null,"code":"const mainArray = [{\n  link: '/',\n  path: 'Home'\n}, {\n  link: '/mounting',\n  path: 'Mounting'\n}, {\n  link: '/updating',\n  path: 'Updating'\n}, {\n  link: '/unmounting',\n  path: 'UnMounting'\n}];\nconst myMountingData = [{\n  evtId: 0,\n  evtType: 'Mounting',\n  evtSubType: 'constructor()',\n  evtDesc: 'The constructor() method is called before anything else, when the component is initiated, and it is the natural place to set up the initial state and other initial values.'\n}, {\n  evtId: 1,\n  evtType: 'Mounting',\n  evtSubType: 'getDerivedStateFromProps()',\n  evtDesc: 'This is the natural place to set the state object based on the initial props. It takes state as an argument, and returns an object with changes to the state.'\n}, {\n  evtId: 2,\n  evtType: 'Mounting',\n  evtSubType: 'render()',\n  evtDesc: 'The render() method is required, and is the method that actually outputs the HTML to the DOM.'\n}, {\n  evtId: 3,\n  evtType: 'Mounting',\n  evtSubType: 'componentDidMount()',\n  evtDesc: 'The componentDidMount() method is called after the component is rendered. This is where you run statements that requires that the component is already placed in the DOM.'\n}]; //export  default myMountingData\n\nconst myUpdatingData = [{\n  evtId: 0,\n  evtType: 'Updating',\n  evtSubType: 'getDerivedStateFromProps()',\n  evtDesc: 'Also at updates the getDerivedStateFromProps method is called. This is the first method that is called when a component gets updated. This is still the natural place to set the state object based on the initial props.'\n}, {\n  evtId: 1,\n  evtType: 'Updating',\n  evtSubType: 'shouldComponentUpdate()',\n  evtDesc: 'In the shouldComponentUpdate() method you can return a Boolean value that specifies whether React should continue with the rendering or not. The default value is true.'\n}, {\n  evtId: 2,\n  evtType: 'Updating',\n  evtSubType: 'render()',\n  evtDesc: 'The render() method is required, and is the method that actually outputs the HTML to the DOM.'\n}, {\n  evtId: 3,\n  evtType: 'Updating',\n  evtSubType: 'getSnapshotBeforeUpdate()',\n  evtDesc: 'In the getSnapshotBeforeUpdate() method you have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update.'\n}, {\n  evtId: 4,\n  evtType: 'Updating',\n  evtSubType: 'componentDidUpdate()',\n  evtDesc: 'The componentDidUpdate method is called after the component is updated in the DOM.'\n}]; //export default myUpdatingData\n\nconst myUnmountingData = [{\n  evtId: 0,\n  evtType: 'Unmounting',\n  evtSubType: 'componentWillUnmount()',\n  evtDesc: 'The componentWillUnmount method is called when the component is about to be removed from the DOM.'\n}]; //export default myUnmountingData\n\nexport default {\n  myMountingData,\n  myUpdatingData,\n  myUnmountingData\n};","map":{"version":3,"sources":["C:/Digikull/react-routing/src/components/myArray.js"],"names":["mainArray","link","path","myMountingData","evtId","evtType","evtSubType","evtDesc","myUpdatingData","myUnmountingData"],"mappings":"AAAA,MAAMA,SAAS,GAAE,CACjB;AAAEC,EAAAA,IAAI,EAAC,GAAP;AAAaC,EAAAA,IAAI,EAAC;AAAlB,CADiB,EAEjB;AAAED,EAAAA,IAAI,EAAC,WAAP;AAAqBC,EAAAA,IAAI,EAAC;AAA1B,CAFiB,EAGjB;AAAED,EAAAA,IAAI,EAAC,WAAP;AAAqBC,EAAAA,IAAI,EAAC;AAA1B,CAHiB,EAIjB;AAAED,EAAAA,IAAI,EAAC,aAAP;AAAuBC,EAAAA,IAAI,EAAC;AAA5B,CAJiB,CAAjB;AAOA,MAAMC,cAAc,GAAG,CACnB;AAAEC,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,OAAO,EAAE,UAArB;AAAkCC,EAAAA,UAAU,EAAE,eAA9C;AAAiEC,EAAAA,OAAO,EAAE;AAA1E,CADmB,EAEnB;AAAEH,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,OAAO,EAAE,UAArB;AAAkCC,EAAAA,UAAU,EAAE,4BAA9C;AAA8EC,EAAAA,OAAO,EAAE;AAAvF,CAFmB,EAGnB;AAAEH,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,OAAO,EAAE,UAArB;AAAkCC,EAAAA,UAAU,EAAE,UAA9C;AAA4DC,EAAAA,OAAO,EAAE;AAArE,CAHmB,EAInB;AAAEH,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,OAAO,EAAE,UAArB;AAAkCC,EAAAA,UAAU,EAAE,qBAA9C;AAAuEC,EAAAA,OAAO,EAAE;AAAhF,CAJmB,CAAvB,C,CAOA;;AAEA,MAAMC,cAAc,GAAG,CACnB;AAAEJ,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,OAAO,EAAE,UAArB;AAAkCC,EAAAA,UAAU,EAAE,4BAA9C;AAA8EC,EAAAA,OAAO,EAAE;AAAvF,CADmB,EAEnB;AAAEH,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,OAAO,EAAE,UAArB;AAAkCC,EAAAA,UAAU,EAAE,yBAA9C;AAA2EC,EAAAA,OAAO,EAAE;AAApF,CAFmB,EAGnB;AAAEH,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,OAAO,EAAE,UAArB;AAAkCC,EAAAA,UAAU,EAAE,UAA9C;AAA4DC,EAAAA,OAAO,EAAE;AAArE,CAHmB,EAInB;AAAEH,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,OAAO,EAAE,UAArB;AAAkCC,EAAAA,UAAU,EAAE,2BAA9C;AAA6EC,EAAAA,OAAO,EAAE;AAAtF,CAJmB,EAKnB;AAAEH,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,OAAO,EAAE,UAArB;AAAkCC,EAAAA,UAAU,EAAE,sBAA9C;AAAwEC,EAAAA,OAAO,EAAE;AAAjF,CALmB,CAAvB,C,CAQA;;AAEA,MAAME,gBAAgB,GAAG,CACrB;AAAEL,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,OAAO,EAAE,YAArB;AAAoCC,EAAAA,UAAU,EAAE,wBAAhD;AAA4EC,EAAAA,OAAO,EAAE;AAArF,CADqB,CAAzB,C,CAIA;;AACA,eAAe;AAACJ,EAAAA,cAAD;AAAgBK,EAAAA,cAAhB;AAA+BC,EAAAA;AAA/B,CAAf","sourcesContent":["const mainArray =[\r\n{ link:'/' , path:'Home' } ,\r\n{ link:'/mounting' , path:'Mounting' } ,\r\n{ link:'/updating' , path:'Updating' } ,\r\n{ link:'/unmounting' , path:'UnMounting' } \r\n]\r\n\r\nconst myMountingData = [\r\n    { evtId: 0, evtType: 'Mounting' , evtSubType: 'constructor()'  , evtDesc: 'The constructor() method is called before anything else, when the component is initiated, and it is the natural place to set up the initial state and other initial values.'},\r\n    { evtId: 1, evtType: 'Mounting' , evtSubType: 'getDerivedStateFromProps()'  , evtDesc: 'This is the natural place to set the state object based on the initial props. It takes state as an argument, and returns an object with changes to the state.'},\r\n    { evtId: 2, evtType: 'Mounting' , evtSubType: 'render()'  , evtDesc: 'The render() method is required, and is the method that actually outputs the HTML to the DOM.'},\r\n    { evtId: 3, evtType: 'Mounting' , evtSubType: 'componentDidMount()'  , evtDesc: 'The componentDidMount() method is called after the component is rendered. This is where you run statements that requires that the component is already placed in the DOM.'}\r\n]\r\n\r\n//export  default myMountingData\r\n\r\nconst myUpdatingData = [\r\n    { evtId: 0, evtType: 'Updating' , evtSubType: 'getDerivedStateFromProps()'  , evtDesc: 'Also at updates the getDerivedStateFromProps method is called. This is the first method that is called when a component gets updated. This is still the natural place to set the state object based on the initial props.'},\r\n    { evtId: 1, evtType: 'Updating' , evtSubType: 'shouldComponentUpdate()'  , evtDesc: 'In the shouldComponentUpdate() method you can return a Boolean value that specifies whether React should continue with the rendering or not. The default value is true.'},\r\n    { evtId: 2, evtType: 'Updating' , evtSubType: 'render()'  , evtDesc: 'The render() method is required, and is the method that actually outputs the HTML to the DOM.'},\r\n    { evtId: 3, evtType: 'Updating' , evtSubType: 'getSnapshotBeforeUpdate()'  , evtDesc: 'In the getSnapshotBeforeUpdate() method you have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update.'},\r\n    { evtId: 4, evtType: 'Updating' , evtSubType: 'componentDidUpdate()'  , evtDesc: 'The componentDidUpdate method is called after the component is updated in the DOM.'}\r\n]\r\n\r\n//export default myUpdatingData\r\n\r\nconst myUnmountingData = [\r\n    { evtId: 0, evtType: 'Unmounting' , evtSubType: 'componentWillUnmount()'  , evtDesc: 'The componentWillUnmount method is called when the component is about to be removed from the DOM.'}\r\n]\r\n\r\n//export default myUnmountingData\r\nexport default {myMountingData,myUpdatingData,myUnmountingData}"]},"metadata":{},"sourceType":"module"}